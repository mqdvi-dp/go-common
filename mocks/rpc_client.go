// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	metadata "google.golang.org/grpc/metadata"
)

// RpcClient is an autogenerated mock type for the RpcClient type
type RpcClient struct {
	mock.Mock
}

// Do provides a mock function with given fields: ctx, host, fullMethodName, req, reply, mds
func (_m *RpcClient) Do(ctx context.Context, host string, fullMethodName string, req interface{}, reply interface{}, mds ...metadata.MD) error {
	_va := make([]interface{}, len(mds))
	for _i := range mds {
		_va[_i] = mds[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, host, fullMethodName, req, reply)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Do")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, interface{}, ...metadata.MD) error); ok {
		r0 = rf(ctx, host, fullMethodName, req, reply, mds...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRpcClient creates a new instance of RpcClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRpcClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *RpcClient {
	mock := &RpcClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
