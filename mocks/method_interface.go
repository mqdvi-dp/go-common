// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MethodInterface is an autogenerated mock type for the MethodInterface type
type MethodInterface struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, payload
func (_m *MethodInterface) Delete(ctx context.Context, payload []byte) ([]byte, int, string, error) {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 []byte
	var r1 int
	var r2 string
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) ([]byte, int, string, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) []byte); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) int); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, []byte) string); ok {
		r2 = rf(ctx, payload)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(context.Context, []byte) error); ok {
		r3 = rf(ctx, payload)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Get provides a mock function with given fields: ctx
func (_m *MethodInterface) Get(ctx context.Context) ([]byte, int, string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []byte
	var r1 int
	var r2 string
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]byte, int, string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) int); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context) string); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(context.Context) error); ok {
		r3 = rf(ctx)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Post provides a mock function with given fields: ctx, payload
func (_m *MethodInterface) Post(ctx context.Context, payload []byte) ([]byte, int, string, error) {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 []byte
	var r1 int
	var r2 string
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) ([]byte, int, string, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) []byte); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) int); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, []byte) string); ok {
		r2 = rf(ctx, payload)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(context.Context, []byte) error); ok {
		r3 = rf(ctx, payload)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Put provides a mock function with given fields: ctx, payload
func (_m *MethodInterface) Put(ctx context.Context, payload []byte) ([]byte, int, string, error) {
	ret := _m.Called(ctx, payload)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 []byte
	var r1 int
	var r2 string
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) ([]byte, int, string, error)); ok {
		return rf(ctx, payload)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) []byte); ok {
		r0 = rf(ctx, payload)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) int); ok {
		r1 = rf(ctx, payload)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, []byte) string); ok {
		r2 = rf(ctx, payload)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(context.Context, []byte) error); ok {
		r3 = rf(ctx, payload)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// NewMethodInterface creates a new instance of MethodInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMethodInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MethodInterface {
	mock := &MethodInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
