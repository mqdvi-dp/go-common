// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	logger "github.com/mqdvi-dp/go-common/logger"
	mock "github.com/stretchr/testify/mock"
)

// Values is an autogenerated mock type for the Values type
type Values struct {
	mock.Mock
}

// Cleanup provides a mock function with given fields:
func (_m *Values) Cleanup() {
	_m.Called()
}

// Delete provides a mock function with given fields: key
func (_m *Values) Delete(key logger.Flags) {
	_m.Called(key)
}

// Load provides a mock function with given fields: key
func (_m *Values) Load(key logger.Flags) (interface{}, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 interface{}
	var r1 bool
	if rf, ok := ret.Get(0).(func(logger.Flags) (interface{}, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(logger.Flags) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(logger.Flags) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// LoadAndDelete provides a mock function with given fields: key
func (_m *Values) LoadAndDelete(key logger.Flags) (interface{}, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for LoadAndDelete")
	}

	var r0 interface{}
	var r1 bool
	if rf, ok := ret.Get(0).(func(logger.Flags) (interface{}, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(logger.Flags) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(logger.Flags) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Set provides a mock function with given fields: key, value
func (_m *Values) Set(key logger.Flags, value interface{}) {
	_m.Called(key, value)
}

// NewValues creates a new instance of Values. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValues(t interface {
	mock.TestingT
	Cleanup(func())
}) *Values {
	mock := &Values{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
