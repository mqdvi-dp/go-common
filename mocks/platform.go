// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	tracer "github.com/mqdvi-dp/go-common/tracer"
	mock "github.com/stretchr/testify/mock"
)

// Platform is an autogenerated mock type for the Platform type
type Platform struct {
	mock.Mock
}

// Debug provides a mock function with given fields: ctx, file, key, args
func (_m *Platform) Debug(ctx context.Context, file string, key string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, file, key)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// GetSpanId provides a mock function with given fields: ctx
func (_m *Platform) GetSpanId(ctx context.Context) string {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSpanId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetTraceId provides a mock function with given fields: ctx
func (_m *Platform) GetTraceId(ctx context.Context) string {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTraceId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Log provides a mock function with given fields: ctx, file, key, args
func (_m *Platform) Log(ctx context.Context, file string, key string, args ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, ctx, file, key)
	_ca = append(_ca, args...)
	_m.Called(_ca...)
}

// SetError provides a mock function with given fields: ctx, file, err
func (_m *Platform) SetError(ctx context.Context, file string, err error) {
	_m.Called(ctx, file, err)
}

// Start provides a mock function with given fields: ctx, operationName
func (_m *Platform) Start(ctx context.Context, operationName string) tracer.Tracer {
	ret := _m.Called(ctx, operationName)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 tracer.Tracer
	if rf, ok := ret.Get(0).(func(context.Context, string) tracer.Tracer); ok {
		r0 = rf(ctx, operationName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tracer.Tracer)
		}
	}

	return r0
}

// NewPlatform creates a new instance of Platform. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlatform(t interface {
	mock.TestingT
	Cleanup(func())
}) *Platform {
	mock := &Platform{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
